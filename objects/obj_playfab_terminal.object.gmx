<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>terminalOutput = "";

enum terminalMessageType {
    request,
    httpCallback,
    header,
    onComplete,
    onError,
    systemMessage,
    map
}

showTerminalMessage[terminalMessageType.request] = true;
showTerminalMessage[terminalMessageType.httpCallback] = true;
showTerminalMessage[terminalMessageType.header] = false;
showTerminalMessage[terminalMessageType.onComplete] = true;
showTerminalMessage[terminalMessageType.onError] = true;
showTerminalMessage[terminalMessageType.systemMessage] = false;
showTerminalMessage[terminalMessageType.map] = false;

terminalTitle[terminalMessageType.request] = "REQUEST";
terminalTitle[terminalMessageType.httpCallback] = "HTTP_CALLBACK";
terminalTitle[terminalMessageType.onComplete] = "ON_COMPLETE";
terminalTitle[terminalMessageType.onError] = "ON_ERROR";
terminalTitle[terminalMessageType.systemMessage] = "SYSTEM_MESSAGE";
terminalTitle[terminalMessageType.map] = "MAP";

terminalY = 0;



pf_init("568C");

var custom_id = "12345"
pf_login_with_custom_id(cpf_login_with_custom_id_complete,cpf_login_with_custom_id_error,custom_id,true, undefined);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>terminalY += ( mouse_wheel_up() -mouse_wheel_down() ) * 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_clear(c_black);

draw_set_color(c_white);
draw_text_ext(10,60+terminalY, terminalOutput,20, display_get_gui_width()-20);

draw_set_color(c_black)
draw_rectangle(0,0, display_get_gui_width(), 60,false);

draw_set_colour(c_white)

var offsetX = 300;
var X = 5;

draw_text(X,5,
"Initialized: "+pf_terminal_bool_to_string(obj_playfab.initialized)
)

X += offsetX;

if ( obj_playfab.initialized ) {
    draw_text(X, 5,
    "Processing: "+ pf_terminal_bool_to_string(obj_playfab.pf_service_processing)
    +"#Service Queue size: "+ string(list_size(obj_playfab.pf_service_queue))
    +"#Service Requests Map size: " + string(ds_map_size(obj_playfab.pf_service_requests))
    );
}

X += offsetX;

draw_text(X,5,
"Title ID: " + obj_playfab.pf_title_id
+"#Authenticated: " + pf_terminal_bool_to_string(obj_playfab.pf_authenticated)
+"#Player ID: " + obj_playfab.pf_player_id

)

X += offsetX;



/*

var terminalOutput = "";

var scriptRow = 0;
var scriptRowEmpty = false;
var scriptRowTitle = false;

var scriptCellValue = undefined;
var scriptIndex = undefined;
var scriptGroupTitle = "";


var scriptRowCount = array_height_2d(scripts)-1;

for(var scriptRow = 0; scriptRow &lt;= scriptRowCount; scriptRow++) {
    
    var scriptCellValue = scripts[scriptRow, 0];
    
    if is_string( scriptCellValue ) {
        var scriptIndex = scriptCellValue;
        
        var terminalOutput = 
            terminalOutput + "#" + string(scriptRow) + ". " + scriptIndex;
        
        //terminal_run_script(scriptIndex);
    }
}

draw_text(0,0,terminalOutput);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
